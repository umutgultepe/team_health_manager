"""Credentials configuration for external services."""

import os
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import InstalledAppFlow


# Slack API credentials
# Get these from https://api.slack.com/apps
SLACK_BOT_TOKEN = ""  # Bot User OAuth Token
SLACK_APP_TOKEN = ""  # App-Level Token

# PagerDuty API Configuration
# Get these from PagerDuty's API Access section
PAGERDUTY_API_KEY = "your-api-key-here"  # API Key (v2)
PAGERDUTY_EMAIL = "your-email@example.com"  # Associated email

# JIRA API Configuration
# Get these from JIRA's API Tokens section
JIRA_API_TOKEN = "your-api-token-here"  # API Token
JIRA_EMAIL = "your-email@example.com"  # Associated email
JIRA_DOMAIN = "your-domain.atlassian.net"  # Your JIRA domain 

# If modifying these scopes, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']

def get_google_credentials() -> Credentials:
    """Get Google API credentials.
    
    Returns:
        Credentials object for Google API authentication
    """
    creds = None
    config_dir = os.path.dirname(__file__)
    token_path = os.path.join(config_dir, 'token.json')
    
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first time.
    if os.path.exists(token_path):
        creds = Credentials.from_authorized_user_file(token_path, SCOPES)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            credentials_path = os.path.join(config_dir, 'google_credentials.json')
            flow = InstalledAppFlow.from_client_secrets_file(
                credentials_path, SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open(token_path, 'w') as token:
            token.write(creds.to_json())
    return creds

def get_google_sheet_id() -> str:
    """Get the default Google Sheet ID.
    
    Returns:
        The Google Sheet ID to use
    """
    # TODO: Replace with your actual Google Sheet ID
    return "YOUR_GOOGLE_SHEET_ID"

# Instructions for setting up Google credentials:
# 1. Go to Google Cloud Console (https://console.cloud.google.com/)
# 2. Create a new project or select an existing one
# 3. Enable the Google Sheets API for your project
# 4. Go to "APIs & Services" > "Credentials"
# 5. Create an OAuth 2.0 Client ID
# 6. Download the credentials and save as 'credentials.json' in the project root
# 7. Copy this file to credentials.py and replace YOUR_GOOGLE_SHEET_ID with your actual sheet ID
# 8. Run the application once to authenticate (it will create token.json) 